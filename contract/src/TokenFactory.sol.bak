// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {ERC20} from "./ERC20.sol";
import {Ownable} from "./Ownable.sol";
import "./CreatorRegistry.sol";

contract CreatorToken is ERC20, Ownable {
    address public creator;
    address public registry;
    uint256 public constant INITIAL_SUPPLY = 1000000 * 10**18; // 1M tokens
    
    constructor(
        string memory name,
        string memory symbol,
        address _creator,
        address _registry
    ) ERC20(name, symbol) {
        creator = _creator;
        registry = _registry;
        _mint(_creator, INITIAL_SUPPLY);
        _transferOwnership(_creator);
    }
    
    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }
    
    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }
}

contract TokenFactory is Ownable {
    CreatorRegistry public registry;
    mapping(address => address) public creatorTokens;
    mapping(address => bool) public isCreatorToken;
    
    event TokenCreated(
        address indexed creator,
        address indexed token,
        string name,
        string symbol
    );
    
    constructor(address _registry) {
        registry = CreatorRegistry(_registry);
    }
    
    function createCreatorToken(
        string memory name,
        string memory symbol
    ) external returns (address) {
        require(registry.canCreateToken(msg.sender), "Cannot create token");
        require(creatorTokens[msg.sender] == address(0), "Token already exists");
        
        CreatorToken token = new CreatorToken(
            name,
            symbol,
            msg.sender,
            address(registry)
        );
        
        address tokenAddress = address(token);
        creatorTokens[msg.sender] = tokenAddress;
        isCreatorToken[tokenAddress] = true;
        
        // Update registry
        registry.setPersonalToken(msg.sender, tokenAddress);
        
        emit TokenCreated(msg.sender, tokenAddress, name, symbol);
        return tokenAddress;
    }
    
    function getCreatorToken(address creator) external view returns (address) {
        return creatorTokens[creator];
    }
    
    function updateRegistry(address _registry) external onlyOwner {
        registry = CreatorRegistry(_registry);
    }
}